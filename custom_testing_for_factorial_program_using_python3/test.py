class Test:
    """
    Testing Factorial function
    None is used for impossible factorials
    """
    def __init__(self, function):
        if(function == None):
            raise Exception("Wrong Function passed")
        else:
            self.function = function
            self.failed = {}
            self.input = [
                    (0, 'Zero'),
                    (-1, 'Negative'),
                    (10, 'Common'),
                    (1.5, 'Other'),
                    (-40, 'Negative'),
                    ("String", 'Other'),
                    ([], 'Other'),
                    (435, 'Large'),
                    (1000, 'Large'),
                ]
            self.output = [
                "1", 
                None, 
                "3628800", 
                None,
                None,
                None, 
                None, 
                "3492568302586660806842386856444503662583831103151963270426674621635660805299560183857848472606235709176324928135785566272105135837366594209833585558814363070358182977612857455917157286297601930479387485609001476512374351083088365377784169915352975335084319635370903975632739983741242649476843853868701961261253116775264274348981987957119039507360300228357035955173885996157115526098729828404721462985306050401799862573642021446691238525999435460350042106751240907334171804238735464810910923810913945050163802642367621133340691998267477098435706895325974891198370299712261195551012031474431244218362172072588213371168354554350818601891065298718997398955163820787133992141684668110466966816201655936284713677379143456185549191695049295489799131242940854594666503625143075761843676694277917440340060421461969945168877545057327721119527524596359860982068019200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            ]
            self.report = {
                    'Zero': ("Handles the input zero", "Cannot handle output for zero"),
                    'Negative': ("Can handle negative numbers", "Cannot handle negative numbers"),
                    'Common': ("Can handle regular numbers", "Cannot handle regular numbers"),
                    'Other': ("Can handle datatypes other than integers", "Cannot handle datatypes other than integers"),
                    'Large': ("Can produce factorials of large numbers", "Cannot produce factorials of large numbers"),
            }

    def run(self):
        for i in self.input:
            try:
                output = self.function(i[0])
            except TypeError:
                self.failed[i[-1]] = 1
            else:
                self.failed[i[-1]] = int(not(self.output[self.input.index(i)] == output))
                # print("For input, " + str(i[0]) + " with intention of handling " + i[-1], output, self.report[i[-1]][self.failed[i[-1]]], sep="\n")
        if('Other' not in self.failed):
            self.failed['Other'] = 0
        print('\nChecked %s with the test inputs,' % (self.function.__name__))
        print("Your function ", *[self.report[i][self.failed[i]] for i in self.failed], sep="\n\t")
        print("")


def main():
    t = Test(factorial1)
    t.run()

    t = Test(factorial2)
    t.run()

    t = Test(factorial3)
    t.run()

if __name__ == '__main__':
    from factorial import *
    main()